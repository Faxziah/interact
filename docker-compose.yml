version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: interact-postgres
    restart: unless-stopped
    env_file:
      - ./backend/.env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-interact}" ]
      interval: 2s
      timeout: 1s
      retries: 5
    networks:
      - interact-network

  # Migration Service
  migration:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: interact-migration
    command: npm run migration:run:prod
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - interact-network
    restart: on-failure

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: interact-backend
    command: npm run start:dev
    restart: unless-stopped
    env_file:
      - ./backend/.env
    ports:
      - "8080:3001"
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - interact-network
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: interact-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    networks:
      - interact-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
    driver: local

networks:
  interact-network:
    driver: bridge 